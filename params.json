{
  "name": "Selectors.js",
  "tagline": "Detect, parse and validate CSS selectors quickly and easily.",
  "body": "[![Build Status](https://travis-ci.org/selectors/selectors.js.svg?branch=master)](https://travis-ci.org/selectors/selectors.js)\r\n[![Dependency Status](https://david-dm.org/selectors/selectors.js.svg)](https://david-dm.org/selectors/selectors.js)\r\n[![devDependency Status](https://david-dm.org/selectors/selectors.js/dev-status.svg)](https://david-dm.org/selectors/selectors.js#info=devDependencies)\r\n\r\nSelectors.js is a CSS Selector parser and validator initially created for use by [Selectors.io](https://selectors.io).\r\n\r\n###In This Readme\r\n\r\n1. **[Download](#download)**\r\n2. **[Build and Test](#build-and-test)**\r\n3. **[Documentation](#documentation)**\r\n\r\n##Download\r\nYou only need one of the below files. For production it's recommended that you use a minified (`.min.js`) version.\r\n\r\n| File | Description\r\n| --- | --- |\r\n| **[selectors.js](https://raw.githubusercontent.com/selectors/selectors.js/master/dist/selectors.js)** | the commented and uncompressed version |\r\n| **[selectors.min.js](https://raw.githubusercontent.com/selectors/selectors.js/master/dist/selectors,min.js)** | the uncommented and compressed version of selectors.js |\r\n| **[selectors-html.js](https://raw.githubusercontent.com/selectors/selectors.js/master/dist/selectors-html.js)** | the commented and uncompressed version with htmlStrict |\r\n| **[selectors-html.min.js](https://raw.githubusercontent.com/selectors/selectors.js/master/dist/selectors-html,min.js)** | the uncommented and compressed version of selectors.html.js |\r\n\r\nThe htmlStrict version offers extra validation methods on HTML5, SVG1.1 and MathML3 Element and Attribute names. WAI-ARIA attribute names are also included in this.\r\n\r\n##Build and Test\r\nThis uses [Grunt](http://gruntjs.com) for minifying, concatenating and testing ([Jasmine](http://jasmine.github.io/)). These are configured through [Node.js](https://nodejs.org/en/), so you'll also need to install that, then run the following command to install the packages:\r\n\r\n```JavaScript\r\nnpm install\r\n```\r\n\r\nTo compile the dist files and run the testing, install Grunt's command line interface (`npm install -g grunt-cli`), then run:\r\n\r\n```JavaScript\r\ngrunt\r\n```\r\n\r\n## Documentation\r\n### s.isValidSelectorsGroup( selectorsGroup )\r\nThis function takes a selector sequence (like `\"foo.bar\"`) or a selectors group (like \"`foo, .bar\"`) `selectorsGroup` and returns `true` or `false` depending on whether the entire input is valid.\r\n\r\n```JavaScript\r\ns.isValidSelectorsGroup('a[href^=\"https://example.com\"]::before')    // true\r\ns.isValidSelectorsGroup('.foo, #bar, [baz]')                         // true\r\ns.isValidSelectorsGroup('.foo, #bar:jazzhands')                      // false\r\ns.isValidSelectorsGroup('var example = \"foo\";')                      // false\r\n```\r\n\r\n###s.isValidSelector( selector [, htmlStrict ] )\r\nThis function takes an individual `selector` and validates it. This is more accurate than `s.isValidSelectorsGroup` for pseudo-classes and pseudo-elements as the selector name is validated against the various specifications.\r\n\r\n```JavaScript\r\ns.isValidSelector('div')                      // true\r\ns.isValidSelector('foobar|*')                 // true\r\ns.isValidSelector(':nth-child( 2n + 1 )')     // true\r\ns.isValidSelector(':nth-of-type(even)')       // true\r\ns.isValidSelector(':lang(fr-be)')             // true\r\ns.isValidSelector('::first-letter')           // true\r\ns.isValidSelector(':-vendor-specific')        // true\r\ns.isValidSelector(':_alt-vendor-specific')    // true\r\ns.isValidSelector(':potato')                  // false\r\n```\r\n\r\nIf using `selectors.html.js` with the `htmlStrict` addon included, this function also accepts an optional `htmlStrict` Boolean value (which defaults to `false`). When `true`, it validates element types and attributes against the [HTML5](https://www.w3.org/TR/html5), [SVG1.1](http://www.w3.org/TR/SVG) and [MathML3](https://www.w3.org/TR/MathML) specifications. [WAI-ARIA](https://www.w3.org/TR/wai-aria/) attributes are also included. This flag has no special meaning when applied to anything other than types and attributes.\r\n\r\nThis does not validate attribute values, only the attribute names themselves.\r\n\r\n```JavaScript\r\ns.isValidSelector('div', true)              // true - valid HTML5 element\r\ns.isValidSelector('polygon', true)          // true - valid SVG1.1 element\r\ns.isValidSelector('munderover', true)       // true - valid MathML3 element\r\ns.isValidSelector('water', true)            // false - water is a compound ;)\r\n\r\ns.isValidSelector('[checked]', true)        // true - valid HTML5 attribute\r\ns.isValidSelector('[clip-rule]', true)      // true - valid SVG1.1 attribute\r\ns.isValidSelector('[mathvariant]', true)    // true - valid MathML3 attribute\r\ns.isValidSelector('[aria-role]', true)      // true - valid WAI-ARIA attribute\r\ns.isValidSelector('[potato]', true)         // false\r\n```\r\n\r\n### s.quickValidation ( selectors )\r\nThis function takes a selector sequence (like `\"foo.bar\"`, a selectors group (like \"`foo, .bar\"`) or an individual selector (`[bar=baz]`) `selectors` and performs fast validation by wrapping `document.querySelector`.\r\n\r\n```JavaScript\r\ns.quickValidation('foo')          // true\r\ns.quickValidation('[att=val]')    // true\r\n```\r\n\r\nIt's recommended **not** to use this if you're needing accurate results. Due to it wrapping `document.querySelector`, the results given by this differ between each browser. Most browser implementations falsly invalidate namespaces (like `ns|div`) and even their own vendor-prefixed pseudo-classes (like `:-webkit-marquee`, etc...). Some also give false positives on invalid identifier names (like `#--`).\r\n\r\n###s.getSequences( selectorsGroup )\r\nThis function takes a selectors group (like `\"foo, .bar\"`) and returns an array of selector sequences.\r\n\r\n```JavaScript\r\ns.getSequences(\"foo.bar\")            [ \"foo.bar\" ]\r\ns.getSequences(\"foo.bar, #baz\")      [ \"foo.bar\", \"#baz\" ]\r\ns.getSequences(\"foo, .bar, #baz\")    [ \"foo\", \".bar\", \"#baz\" ]\r\n```\r\n\r\n###s.getSelectors( selectorSequence )\r\nThis function takes a selector sequence (like `\"foo.bar:hover\"`) `selectorSequence` and returns an array of individual selectors.\r\n\r\n```JavaScript\r\ns.getSequences(\"foo\")              [ \"foo\" ]\r\ns.getSequences(\"foo.bar\")          [ \"foo\", \".bar\" ]\r\ns.getSequences(\"foo.bar:hover\")    [ \"foo\", \".bar\", \":hover\" ]\r\n```\r\n\r\n###s.getType( selector )\r\nThis function takes an individual `selector` (like `\"foo\"` or `\".bar\"`) and returns what type of selector it is.\r\n\r\n```JavaScript\r\ns.getType('div')           // \"type\"\r\ns.getType('.bar')          // \"class\"\r\ns.getType('#baz')          // \"id\"\r\ns.getType('[att]')         // \"attribute\"\r\ns.getType(':foo')          // \"pseudo-class\"\r\ns.getType('::foo')         // \"pseudo-element\"\r\ns.getType(':foo(n)')       // \"pseudo-class\"\r\ns.getType(':not(.bar)')    // \"negation\"\r\n```\r\n\r\n###s.getAttributeProperties( attributeSelector )\r\nThis function takes an individual `attributeSelector` (like `\"[att=val]\"` or `\"[ns|att*=\"val\"]`) and returns an object containing its `namespace`, `name`, `symbol` and `value`.\r\n\r\n```JavaScript\r\ns.getAttributeProperties('[att=\"5\"]')    // { namespace: null, name: 'att', symbol: '=', value: '5' }\r\n\r\ns.getAttributeProperties('[ns|foo^=\"bar\"]').namespace    // 'ns'\r\ns.getAttributeProperties('[ns|foo^=\"bar\"]').name         // 'foo'\r\ns.getAttributeProperties('[ns|foo^=\"bar\"]').symbol       // '^='\r\ns.getAttributeProperties('[ns|foo^=\"bar\"]').value        // 'bar'\r\n```\r\n\r\n###s.getPseudoProperties( pseudoSelector )\r\nThis function takes an individual pseudo-class or pseudo-element selector (like `:hover` or `:nth-child(9n-9)` or `::before`) `pseudoSelector` and returns an object containing its `vendor`, `name` and `args`.\r\n\r\nIf CSS2.1 pseudo-elements `::first-line`, `::first-letter`, `::before` or `::after` are passed in, an additional `colons` property is included in the response. This is to allow implementations to warn users that the `:...` single-colon syntax is deprecated (if `colons` is equal to `1` instead of `2`).\r\n\r\n```JavaScript\r\ns.getPseudoProperties(':hover')                 // { vendor: null, name: 'hover', args: null }\r\ns.getPseudoProperties(':nth-child(2n + 1 )')    // { vendor: null, name: 'nth-child', args: '2n + 1 ' }\r\ns.getPseudoProperties('::before')               // { vendor: null, name: 'before', args: null, colons: 2 }\r\ns.getPseudoProperties('::-webkit-scrollbar')    // { vendor: '-webkit-', name: 'scrollbar', args: null }\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}